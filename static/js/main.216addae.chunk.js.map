{"version":3,"sources":["components/UserInfo/UserInfo.jsx","components/CommentInfo/CommentInfo.jsx","components/CommentList/CommentList.jsx","components/PostInfo/PostInfo.jsx","components/PostList/PostList.jsx","App.jsx","index.jsx"],"names":["UserInfo","user","className","href","email","name","CommentInfo","comment","body","CommentList","comments","map","id","PostInfo","post","title","length","PostList","posts","postsFromServer","userId","usersFromServer","find","currentPostId","commentsFromServer","filter","postId","App","ReactDOM","render","document","getElementById"],"mappings":"018IAEaA,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACtB,mBAAGC,UAAU,WAAWC,KAAI,iBAAYF,EAAKG,OAA7C,SAAuDH,EAAKI,QCHjDC,G,MAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpBF,EAAsBE,EAAtBF,KAAMD,EAAgBG,EAAhBH,MAAOI,EAASD,EAATC,KAErB,OACE,sBAAKN,UAAU,cAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,wBAAQA,UAAU,oBAAlB,SAAuCG,IAEtC,OAED,mBAAGH,UAAU,qBAAqBC,KAAI,iBAAYC,GAAlD,SAA4DA,OAG9D,qBAAKF,UAAU,oBAAf,SAAoCM,SCV7BC,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACzB,qBAAKR,UAAU,cAAf,SACGQ,EAASC,KAAI,SAAAJ,GAAO,OACnB,cAAC,EAAD,CAAaA,QAASA,GAAcA,EAAQK,UCFrCC,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjBC,EAAgCD,EAAhCC,MAAOd,EAAyBa,EAAzBb,KAAMO,EAAmBM,EAAnBN,KAAME,EAAaI,EAAbJ,SAG3B,OACE,sBAAKR,UAAU,WAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,oBAAIA,UAAU,kBAAd,SAAiCa,IAEjC,8BACG,eAED,cAAC,EAAD,CAAUd,KAAMA,UAIpB,mBAAGC,UAAU,iBAAb,SAA+BM,IAE/B,uBACqB,IAApBE,EAASM,OACR,mBAAG,UAAQ,oBAAX,SAlBgB,oBAoBhB,cAAC,EAAD,CAAaN,SAAUA,QCxBlBO,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACtB,qBAAKhB,UAAU,WAAf,SACGgB,EAAMP,KAAI,SAAAG,GAAI,OACb,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKF,UCQhCM,EAAQC,EAAgBR,KAAI,SAAAG,GAAI,kCACjCA,GADiC,IAEpCb,MARkBmB,EAQAN,EAAKM,OARKC,EAC3BC,MAAK,SAAArB,GAAI,OAAIA,EAAKW,KAAOQ,MAAW,MAQrCV,UANsBa,EAMIT,EAAKF,GANQY,EACtCC,QAAO,SAAAlB,GAAO,OAAIA,EAAQmB,SAAWH,QADhB,IAAAA,EAHJH,KAYPO,EAAM,kBACjB,0BAASzB,UAAU,MAAnB,UACE,oBAAIA,UAAU,aAAd,kCACA,cAAC,EAAD,CAAUgB,MAAOA,QClBrBU,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.216addae.chunk.js","sourcesContent":["import './UserInfo.scss';\n\nexport const UserInfo = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>{user.name}</a>\n);\n","export const CommentInfo = ({ comment }) => {\n  const { name, email, body } = comment;\n\n  return (\n    <div className=\"CommentInfo\">\n      <div className=\"CommentInfo__title\">\n        <strong className=\"CommentInfo__name\">{name}</strong>\n\n        {' by '}\n\n        <a className=\"CommentInfo__email\" href={`mailto:${email}`}>{email}</a>\n      </div>\n\n      <div className=\"CommentInfo__body\">{body}</div>\n    </div>\n  );\n};\n","import './CommentList.scss';\nimport { CommentInfo } from '../CommentInfo';\n\nexport const CommentList = ({ comments }) => (\n  <div className=\"CommentList\">\n    {comments.map(comment => (\n      <CommentInfo comment={comment} key={comment.id} />\n    ))}\n  </div>\n);\n","import './PostInfo.scss';\nimport { UserInfo } from '../UserInfo';\nimport { CommentList } from '../CommentList';\n\nexport const PostInfo = ({ post }) => {\n  const { title, user, body, comments } = post;\n  const noCommentsMsg = 'No comments yet';\n\n  return (\n    <div className=\"PostInfo\">\n      <div className=\"PostInfo__header\">\n        <h3 className=\"PostInfo__title\">{title}</h3>\n\n        <p>\n          {' Posted by  '}\n\n          <UserInfo user={user} />\n        </p>\n      </div>\n\n      <p className=\"PostInfo__body\">{body}</p>\n\n      <hr />\n      {comments.length === 0 ? (\n        <b data-cy=\"NoCommentsMessage\">{noCommentsMsg}</b>\n      ) : (\n        <CommentList comments={comments} />\n      )}\n    </div>\n  );\n};\n","import { PostInfo } from '../PostInfo';\n\nexport const PostList = ({ posts }) => (\n  <div className=\"PostList\">\n    {posts.map(post => (\n      <PostInfo post={post} key={post.id} />\n    ))}\n  </div>\n);\n","import './App.scss';\n\nimport postsFromServer from './api/posts.json';\nimport commentsFromServer from './api/comments.json';\nimport usersFromServer from './api/users.json';\nimport { PostList } from './components/PostList';\n\nconst getUserById = userId => usersFromServer\n  .find(user => user.id === userId) || null;\n\nconst getCommentsById = currentPostId => commentsFromServer\n  .filter(comment => comment.postId === currentPostId);\n\nconst posts = postsFromServer.map(post => ({\n  ...post,\n  user: getUserById(post.userId),\n  comments: getCommentsById(post.id),\n}));\n\nexport const App = () => (\n  <section className=\"App\">\n    <h1 className=\"App__title\">Static list of posts</h1>\n    <PostList posts={posts} />\n  </section>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}